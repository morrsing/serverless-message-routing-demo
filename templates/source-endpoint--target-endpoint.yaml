AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Creates a route between a source endpoint and a target endpoint.
Parameters:
  SourceEndpoint:
    Type: String
    Description: Enter an source endpoint to poll for new messages.
  SourceRequestMethod:
    Type: String
    Description: >
      Choose a method with which to make HTTP request of the source endpoint.
    AllowedValues:
      - GET
      - PUT
      - POST
      - DELETE
  TargetEndpoint:
    Type: String
    Description: Enter a targret endpoint to push new messages onto.
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      RoleName: !Join ['', [ !Ref 'AWS::StackName', 'LambdaExecutionRole' ] ]
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
  MessageRouteTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'states.amazonaws.com'
            Action: 'sts:AssumeRole'
      RoleName: !Join ['', [ !Ref 'AWS::StackName', 'MessageRouteTaskExecutionRole' ] ]
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'

  PollIngestor:
    Type: AWS::Lambda::Function
    DependsOn: MessageRoute
    Properties:
      Code:
        S3Bucket: "f12f301f-messaging-demo"
        S3Key: "lambdas/poll-ingestor-lambda.zip"
      Description: Messaging Demo Poll Ingestor
      Environment:
        Variables:
          ENDPOINT: !Ref SourceEndpoint
          METHOD: !Ref SourceRequestMethod
          STATE_MACHINE_ARN: !Ref MessageRoute
      Handler: index.default
      Role: !GetAtt [LambdaExecutionRole, 'Arn' ]
      Runtime: nodejs6.10
      Timeout: 10
  AllowEventLambdaInvocation:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PollIngestor
      Principal: 'events.amazonaws.com'

  RunEveryMinute:
    Type: AWS::Events::Rule
    Properties:
      Description: Trigger the route every minute.
      ScheduleExpression: 'rate(1 minute)'
      State: ENABLED
      Targets:
        - Id: !Join [ '-', [ !Ref 'AWS::StackName', 'EventTarget' ] ]
          Arn: !GetAtt [PollIngestor, 'Arn' ]

  Transformer:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: "f12f301f-messaging-demo"
        S3Key: "lambdas/transformer-lambda.zip"
      Description: Messaging Demo Transformer
      Handler: index.default
      Role: !GetAtt [LambdaExecutionRole, 'Arn' ]
      Runtime: nodejs6.10
      Timeout: 10
  PushEmitter:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: "f12f301f-messaging-demo"
        S3Key: "lambdas/push-emitter-lambda.zip"
      Description: Messaging Demo Push Emitter
      Environment:
        Variables:
          ENDPOINT: !Ref TargetEndpoint
      Handler: index.default
      Role: !GetAtt [LambdaExecutionRole, 'Arn' ]
      Runtime: nodejs6.10
      Timeout: 10

  MessageRoute:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: !Join [ '-', [ !Ref 'AWS::StackName', 'StateMachine' ] ]
      DefinitionString: !Sub
        - |-
          {
            "Comment": "An example state machine that routes a message from a Poll Ingestor to a Push Emitter.",
            "StartAt": "Transform",
            "States": {
              "Transform": {
                "Type": "Task",
                "Resource": "${transformerLambdaArn}",
                "Next": "Push",
                "Retry": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                  }
                ]
              },
              "Push": {
                "Type": "Task",
                "Resource": "${pushEmitterLambdaArn}",
                "Retry": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                  }
                ],
                "End": true
              }
            }
          }
        - transformerLambdaArn: !GetAtt [ Transformer, Arn ]
          pushEmitterLambdaArn: !GetAtt [ PushEmitter, Arn ]
      RoleArn: !GetAtt [ MessageRouteTaskExecutionRole, Arn ]
